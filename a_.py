# -*- coding: utf-8 -*-
"""A*

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/ARYANBAJAJ/1BmqVikJQOxg_zCHJcQmyxCjX-rz86omZ
"""
"""GOOGLE MAP"""
from collections import deque
import folium
import networkx as nx

# create a grid map
grid_map = [[0, 0, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 0],
            [0, 1, 0, 0]]

# create an adjacency list representation of the grid map
G = nx.Graph()
for row in range(len(grid_map)):
    for col in range(len(grid_map[0])):
        if grid_map[row][col] == 0:
            G.add_node((row, col))
            if row > 0 and grid_map[row-1][col] == 0:
                G.add_edge((row, col), (row-1, col))
            if col > 0 and grid_map[row][col-1] == 0:
                G.add_edge((row, col), (row, col-1))

# define the starting and ending locations
start = (0, 0)
end = (3, 3)

# use the A* algorithm to find the shortest path
path = nx.astar_path(G, start, end)

# print the path
print(path)

map_cp = folium.Map(location=[28.6315, 77.2167])

folium.Marker(location=[28.6292, 77.2291],popup='Modern School, Connaught Place, New Delhi',icon=folium.Icon(color='green', icon='info-sign')).add_to(map_cp)

folium.Marker(location=[28.6172, 77.2082],popup='Parliament, Connaught Place, New Delhi',icon=folium.Icon(color='red', icon='info-sign')).add_to(map_cp)

# use the folium.PolyLine class to add the path to the map
folium.PolyLine(path, color="green", weight=2.5, opacity=1).add_to(map_cp)

map_cp.save("connaught_place.html")

parliament_india_coord = [28.6172, 77.2082]
modern_school_coord = [28.6292, 77.2291]

#create a map centered on Connaught Place, New Delhi using the folium.Map class 
map_cp = folium.Map(location=[28.6315, 77.2167])

# Use the folium.Marker class to add a marker for Parliament of India on the map
folium.Marker(
    location=parliament_india_coord,
    popup='Parliament of India',
    icon=folium.Icon(color='blue', icon='info-sign')
).add_to(map_cp)

# Use the folium.Marker class to add a marker for Modern School on the map
folium.Marker(
    location=modern_school_coord,
    popup='Modern School',
    icon=folium.Icon(color='red', icon='info-sign')
).add_to(map_cp)

# Draw a line between the two markers
folium.PolyLine([parliament_india_coord, modern_school_coord], color="green", weight=2, opacity=1).add_to(map_cp)

# use the save method to save the map as an HTML file
map_cp.save("connaught_place_path.html")

"""## Without roads"""

import math
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="geoapiExercises")

Place_1 = (input("Enter Place One Name : "))
Place_2 = (input("Enter Place Two Name : "))

location_1 = geolocator.geocode(Place_1)
location_2 = geolocator.geocode(Place_2)

long_1 = ("Longitude: ", location_1.longitude)
Lat_1 = ("Latitude: ", location_1.latitude)
long_2 = ("Longitude: ", location_2.longitude)
Lat_2 = ("Latitude: ", location_2.latitude)

coord_1 = [location_1.latitude, location_1.longitude]
coord_2 = [location_2.latitude, location_2.longitude]

# set the starting point and ending point
start_point = coord_1 
end_point = coord_2 

# convert latitudes and longitudes to radians
start_lat, start_lon = math.radians(start_point[0]), math.radians(start_point[1])
end_lat, end_lon = math.radians(end_point[0]), math.radians(end_point[1])

# use the Haversine formula to calculate the distance
a = math.sin((end_lat - start_lat) / 2)**2 + math.cos(start_lat) * math.cos(end_lat) * math.sin((end_lon - start_lon) / 2)**2
c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
distance = 6371 * c  # 6371 is the radius of the Earth

# assuming an average speed of kmph you can calculate the time
time = distance / 10

import folium

# create a map centered at the starting point
m = folium.Map(location=start_point, zoom_start=13)

# add markers for the starting and ending points
folium.Marker(start_point, popup=Place_1).add_to(m)
folium.Marker(end_point, popup=Place_2).add_to(m)

# draw a line between the two points
folium.PolyLine([start_point, end_point], color='red', weight=2.5, opacity=1).add_to(m)

print("Distance: {:.2f} km".format(distance))
print("Time: {:.2f} s".format(time))

m
